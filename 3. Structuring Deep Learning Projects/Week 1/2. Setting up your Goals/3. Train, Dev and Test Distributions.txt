The way you set up your training dev, or development sets and test sets, can have a huge impact on how rapidly you or your team can make progress on building machine learning application.

Workflow in machine learning is that you try a lot of ideas, train up different models on the training set, and then use the dev set to evaluate the different ideas and pick one. And, keep innovating to improve dev set performance until, finally, you have one clause that you're happy with that you then evaluate on your test set.

Lets say you are, again, building a cat classifier, and you have data from different regions like US, UK, other European countries, South America, India, China, other Asian countries, and Australia. To set up your dev and test sets, you say that the data from the first 4 regions will make up the dev set, and the data from the rest of the regions will make up the test set. This is very wrong, because, your dev set and test set is made of data from different distributions. Which means, if you tune your hyperparameters to do well on the dev set, it does not mean your classifier will do well on the test set because the distribution of the data is different. What you will do instead is just randomly shuffle the data into dev and test sets. In this way, both the dev and test sets will have data from all 8 regions, and hence will be of the same distribution.

Here's an example. A machine learning team that actually spent several months optimizing on a dev set which was comprised of loan approvals for medium income zip codes. So, the specific machine learning problem was, "Given an input X about a loan application, can you predict y and which is, whether or not, they'll repay the loan?" So, this helps you decide whether or not to approve a loan. And so, the dev set came from loan applications. They came from medium income zip codes. But, after working on this for a few months, the team then, suddenly decided to test this on data from low income zip codes or low income postal codes. And, of course, the distributional data for medium income and low income zip codes is very different. And, the classifier, that they spend so much time optimizing in the former case, just didn't work well at all on the latter case. And so, this particular team actually wasted about three months of time and had to go back and really re-do a lot of work. And, what happened here was, the team spent three months aiming for one target, and then, after three months, the manager asked, "Oh, how are you doing on hitting this other target?" 