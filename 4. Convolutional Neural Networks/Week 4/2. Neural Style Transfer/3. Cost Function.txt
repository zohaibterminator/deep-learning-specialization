To build a Neural Style Transfer system, let's define a cost function for the generated image, and by minimizing this cost function, you can generate the image that you want. Remember what the problem formulation is. You're given a content image C, given a style image S and you goal is to generate a new image G.

In order to implement neural style transfer, what you're going to do is define a cost function J(G) that measures how good is a particular generated image and we'll use gradient descent to minimize J(G) in order to generate the image. We're going to define two parts to this cost function. The first part is called the content cost J_content(C, G), which will measures how similar is the contents of the generated image G to the content of the content image C. And then we wil going to add that to a style cost function J_style(S, G), which measures how similar is the style of the image G to the style of the image S. Finally, we'll weight these with two hyper parameters α and β to specify the relative weighting between the content costs and the style cost. This is the cost function:

J(G) = α * J_content(C, G) + β * J_style(S, G)

It might seem redundant to use two different hyper parameters to specify the relative cost of the weighting. One hyper parameter seems like it would be enough but the original authors of the Neural Style Transfer Algorithm, use two different hyper parameters, so we will follow that convention.

The way that the algorithm would run is that to find the value of cost function J(G) and in order to generate the image G, you will first initiate the G randomly. Lets say the image is of 100x100x3 size, we will then intialize a G matrix with random values. We will then update G using gradient descent and by calculating the cost function J(G). You will actually update the pixel values of G in the same way you update weights, that is by taking the partial derivating of the cost function J(G) w.r.t G, and then subtracting the derivate from each pixel value.