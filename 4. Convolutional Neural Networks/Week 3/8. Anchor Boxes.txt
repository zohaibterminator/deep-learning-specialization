One of the problems with object detection as you have seen it so far is that each of the grid cells can detect only one object. What if a grid cell wants to detect multiple objects? You can use the idea of anchor boxes.

Lets say you have an image with a pedestrian and a car, and both the pedestrian's and car's midpoint fall in the middle cell. So, for that grid cell, if Y outputs this vector where you are detecting three causes, pedestrians, cars and motorcycles, it won't be able to output two detections, it would have to pick one of 2 detections. With the idea of anchor boxes, what you are going to do, is pre-define two different shapes called, anchor boxes or anchor box shapes. And what you are going to do is now, be able to associate two predictions with the two anchor boxes. And in general, you might use more anchor boxes, maybe five or even more. But for this example we will use 2. You define the class label y for that cell to detect the pedestrian and the car, you will basically have different set of 8 values, depending on the number of anchor boxes you have defined. So, y will have values of Pc, bx, by, bh, bw, c1, c2, c3 for the pedestrian, than another set of Pc, bx, by, bh, bw, c1, c2, c3 valus for the car in the same y vector. The first 8 values will be for anchor box 1, and the second 8 values of the anchor box 2. So, depending on which anchor box the object will be assigned to, it will take up the first 8 values or the latter 8.

Previously, we assigned each object in the image based on the grid cell that contains that objects midpoint. Now with anchor boxes, we will do the same as before, but additionally, we will also assign the object to the anchor box it has the highest IoU with. So for each output, it will not only have a specified grid cell, it will also have a specific anchor box assigned to it in the same grid cell. So, for our example, the output volume will be 3x3x16, because we are using 3x3 grid, and we are using 2 anchor boxes, so our y vector will be of 16 dimensions instead of 8.

Even though we have motivated anchor boxes as a way to deal with what happens if two objects appear in the same grid cell, in practice, that happens quite rarely, especially if you use a 19 by 19 rather than a 3 by 3 grid. Maybe even better motivation or even better results that anchor boxes gives you is it allows your learning algorithm to specialize better. In particular, if your dataset has some tall, skinny objects like pedestrians, and some wide objects like cars, then this allows your learning algorithm to specialize so that some of the outputs can specialize in detecting wide, fat objects like cars, and some of the output units can specialize in detecting tall, skinny objects like pedestrians.

So finally, how do you choose the anchor boxes? And people used to just choose them by hand or choose maybe five or 10 anchor box shapes that spans a variety of shapes that seems to cover the types of objects you seem to detect. As a much more advanced version, and even better way to do this in one of the later YOLO research papers, is to use a K-means algorithm, to group together two types of objects shapes you tend to get. And then to use that to select a set of anchor boxes that this most stereotypically representative of the maybe multiple, of the maybe dozens of object causes you're trying to detect. But that's a more advanced way to automatically choose the anchor boxes. And if you just choose by hand a variety of shapes that reasonably expands the set of object shapes, you expect to detect some tall, skinny ones, some fat, white ones, it should work as well.