One of the problems of Object Detection as you've learned about this so far, is that your algorithm may find multiple detections of the same objects. Rather than detecting an object just once, it might detect it multiple times. Non-max suppression is a way for you to make sure that your algorithm detects each object only once.

Let's say you want to detect cars in an image. You might place a 19x19 grid over this. Technically, each of the car in the image may just have only 1 midpoint, so it should only be assigned to 1 cell. But, in reality, either of the surrounding cells may think that the center of the car is in it, since you are running the classification and localization algorithm for everyone of these split cells, this means that you can end up with multiple detections of the same object in an image.

So, when you run your algorithm, you might end up with multiple detections of each object. So, what non-max suppression does, is it cleans up these detections. So they end up with just one detection per car, rather than multiple detections per car. So concretely, what it does, is it first looks at the probabilities associated with each of these detections, i.e. Pcs. It is actually Pc times C1 or C2, etc, but for now lets say it is Pc.  it first takes the largest one, which in this case is 0.9 and says, "That's my most confident detection, so let's highlight that and just say I found the car there." Having done that, the non-max suppression parts then looks at all of the other detection, specifically all the ones with a high IoU with the box having the largest Pc, and suppress them. Then, it will look at another object and take the highest probability bounding box one, and then suppress other boxes having a high IoU with it. The final boxes will be the final prediction.

Let's go through the details of the algorithm. Firstly, you will discard all the predictions of the bounding boxes with Pc less than or equal to some threshold, lets say 0.6. So we're going to say that unless you think there's at least a 0.6 chance it is an object there, let's just get rid of it. Of the remaining bounding box, you will repeatedly pick the highest probability bounding boxes, and then output that as a prediction. Next, you then discard any remaining boxes. So discard any remaining box with a high overlap, with a high IOU, with the box that you just output in the previous step. Then, you just repeat this entire process for any remaining boxes you have not yet processed, until you've taken each of the boxes and either output it as a prediction, or discarded it as having too high an overlap, or too high an IOU, with one of the boxes that you have just output as your predicted position for one of the detected objects.

I've described the algorithm using just a single object on this slide. If you actually tried to detect three objects say pedestrians, cars, and motorcycles, then the output vector will have three additional components. And it turns out, the right thing to do is to independently carry out non-max suppression three times, one on each of the outputs classes.