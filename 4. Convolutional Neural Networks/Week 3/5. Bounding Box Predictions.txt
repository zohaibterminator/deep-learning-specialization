With sliding windows, you take some discrete set of locations and run the classifier through it. Most of the time, almost none of the boxes really match up perfectly with the position of the car. A good way to get this output more accurate bounding boxes is with the YOLO algorithm. YOLO stands for You Only Look Once.

So, what you will do is, lets say you have a 100x100x3 image, you will place a grid, of lets say 3x3 size. In reality the grid is more finer like 19x19, etc. And basic idea is you're going to take the image classification and localization algorithm that you learned previously, and apply that to each of the nine grid cells of the image. So for each of the nine grid cells, you will specify the label y, which will be an 8-dimensional vector, like we saw previously, and will have the value Pc, which is the probability that an object exists inside this block of the grid, the 4 values for the bounding boxes bx, by, bh, and bw, and finally the class labels. Since in our original example, we had 3 classes, car, pedestrian, motorcycles and background. So, there will 3 values for 3 class label car, pedestrian, and motorcycles. If Pc is 0, then this means that the example belongs to the background class and has no object. So, since we have a 3x3 grid, the target output for an image will be of size 3x3x8, because each of cell in the grid will have an 8-dimensional target vector associated with it. So, as long as you only have 1 object per grid, this should work okay, altough, we will look at how to detect multiple objects in a grid cell later. We have used a much coarser grid size of 3x3, while in practice you will use a much finer grid size, so that there is less of a chance that the object can be assigned to multiple cells. And just as a reminder, the way you assign an object to grid cell is you look at the midpoint of an object, and then you assign that object to whichever one grid cell contains the midpoint of the object. So each object, even if the object spans multiple grid cells, that object is assigned only to one of the nine grid cells or one of the 3x3 or one of the 19x19 grid cells.

Notice two things. First, this is a lot like the image classification and localization algorithm that we talked about in the first video of this week, in that it outputs the bounding box coordinates explicitly. And so this allows the neural network to output bounding boxes of, you know, any aspect ratio, um, as well as output much more precise coordinates that aren't just dictated by the stride size of your sliding windows classifier. And second, this is a convolutional implementation. You're not implementing this algorithm nine times, on the 3 by 3 grid, or if you're using a 19 by 19 grid, 19 squared is 361. So you're not running the same algorithm, you know, 361 times or 19 squared times. You will just use a single pass and due to shared computational aspects, you will get a 3x3x8 or 19x19x8 volume depending on your grid size. So this is a pretty efficient algorithm. And in fact, uh, one nice thing about the YOLO algorithm, which- which accounts for its popularity, is because this is a convolutional implementation, it actually runs very fast. So this works even for real-time object detection.

Now, before wrapping up, how do you encode these bounding boxes? In our example image, if we take the car on the right, the y label would be [1, bx, by, bh, bw, 0, 1, 0]. We will take the convention, that the co-ordinates of the upper left corner of the cell of the grid is (0,0), and the co-ordinates of the bottom right corner of the image is (1,1). Since the car is slightly on the upper left side, we can assume the values for bx and by to be 0.4 and 0.3 respectively. Since the bounding box is horizontally about 90% of the width of the cell, we can say that the value of bw is 0.9, and since the size of the bounding box vertically is roughly half that of the cell's height, we can say that 0.5 is the value of bh. The values of bx and by had to be between 0 and 1, otherwise the object would have been assigned to another cell, but the values of bh and bw can be greater than 1. So there are multiple ways of specifying the bounding boxes. But this would be one convention that's quite reasonable. Although if you read the YOLO research papers, there are other parametrizations that work even a little bit better. Although there are some more complicated parametrizations involving sigmoid functions to make sure bx and by is between 0 and 1, and using an exponential parametrization to make sure that bw and bh are non-negative, since these has to be greater than or equal to 0. There are some other more advanced parametrizations that work even a little bit better. But the one you saw here should work okay.