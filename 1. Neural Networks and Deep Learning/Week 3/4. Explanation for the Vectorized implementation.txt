Lets see why our vectorized implementation is correct.

Lets look at some examples of the calculation of z. We will consider that b is zero for this example, but we will change our argument a bit so it works with b as well.

z^[1](1) = W^[1] * x^(1) + b^[1]
z^[1](2) = W^[1] * x^(2) + b^[1]
z^[1](3) = W^[1] * x^(3) + b^[1]

W^[1] is a matrix. When we will multiply it with x^(1), we will get a column vector with some values. Same is true for examples like x^(2) and x^(3).

We also know that the matrix X is formed by stacking the values of x like this:

    [ .      .     .  ]
X = [x^(1) x^(2) x^(3)]
    [ .      .     .  ]

So when we will multiply that with W^[1] with X, and through matrix multiplication, we will know that the first column will basically contain the product, the values of the column vector that is, of W^[1] and x^[1], then the second column will contain values of the W^[1] and x^[2] and so on.

Each column will then correspond to the values of z^[1](i), with the first column being z^[1](1), the second column of the matrix will correspond to value of z^[1](2) and so on. This matrix will then collectively called Z^[1]. For b, we can just add the column vectors to the output of the W^[1] and X.